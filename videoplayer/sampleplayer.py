# Form implementation generated from reading ui file 'c:\Users\ryanj\OneDrive\Desktop\PD2gui\videoplayer\sampleplayer.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets    
from PyQt6.QtMultimediaWidgets import QVideoWidget


class CustomSlider(QtWidgets.QSlider):
    def __init__(self, parent=None):
        super().__init__(QtCore.Qt.Orientation.Horizontal, parent) # Orientation of QSlider is horizontal
        self.setValue(0) # Initial position is in 0

        # Initialize knob positions as percentages of the slider width
        self.trim_start_knob_pos_percent = 0.0 # start knob at 0.0
        self.trim_end_knob_pos_percent = 1.0 # end knob at 1.0
        self.video_duration = None # attribute to contain the video duration
        self.class_timestamps = None # attribute to contain the timestamps dictionary

        self.is_clipping = False # Initialize to False - initially hide the clipping knobs
        self.toggle_clipping_knobs_visibility(self.is_clipping)

        self.setMouseTracking(True)  # Track mouse movement

    # For creating additional knobs (start and end knob for clipping)
    def paintEvent(self, event):
        super().paintEvent(event) # Override paintEvent() method from QSlider but also use the base method
        painter = QtGui.QPainter(self)

        # If clipping, show the clipping knobs and make them visible
        if self.is_clipping:
            # Calculate the knob positions based on the percentages of the slider width to make it adjustable for any window size
            knob_radius = 5 # Set slider knob radius
            start_knob_x = self.trim_start_knob_pos_percent * self.width() # Relative position of start knob
            end_knob_x = self.trim_end_knob_pos_percent * self.width() # Relative position of end knob
            
            painter.setBrush(QtGui.QColor(255, 0, 0))  # Red for end and start knobs
            painter.drawEllipse(QtCore.QRectF(start_knob_x - knob_radius, self.height() / 2 - knob_radius, knob_radius * 2, knob_radius * 2)) # Draw circle for start knob
            painter.drawEllipse(QtCore.QRectF(end_knob_x - knob_radius, self.height() / 2 - knob_radius, knob_radius * 2, knob_radius * 2)) # Draw circle for end knob``


        line_color_mapping = {
            'weapons': (50, 180, 75, 180), # Greenish color
            'upper_clothing_and_colors': (200, 100, 20, 150), # Orange-ish color
            'lower_clothing_and_colors': (160, 60, 200, 170) # Purple-ish color
        }
 
        if self.class_timestamps:
        # Create a dictionary to store blended colors at each timestamp
            blended_colors = {}

        for cls, timestamps in self.class_timestamps.items():
            for timestamp in timestamps:
                timestamp_indicator_x = timestamp * self.width() / self.video_duration
                color = line_color_mapping[cls]

                # If timestamp already exists in blended_colors, blend the colors
                if timestamp in blended_colors:
                    # Blend the RGB values and alpha
                    blended_colors[timestamp][:3] = [
                        (a + b) / 2 for a, b in zip(blended_colors[timestamp][:3], color[:3])
                    ]
                    blended_colors[timestamp][3] = (blended_colors[timestamp][3] + color[3]) / 2
                else:
                    # If timestamp is not in blended_colors, add the color to the dictionary
                    blended_colors[timestamp] = list(color)

        # Iterate through the blended_colors and draw the lines
        for timestamp, color in blended_colors.items():
            timestamp_indicator_x = timestamp * self.width() / self.video_duration

            # Set the color
            pen_color = QtGui.QColor(*[int(c) for c in color])
            
            pen = QtGui.QPen(pen_color)
            pen.setWidth(2)

            painter.setCompositionMode(QtGui.QPainter.CompositionMode.CompositionMode_SourceOver)
            painter.setPen(pen)

            # Draw a line on the QSlider slidebar
            painter.drawLine(int(timestamp_indicator_x), 0, int(timestamp_indicator_x), self.height())

            # # Get the resulting color from the painter
            # result_color = painter.pen().color()
            # # Print RGBA values
            # print(f"Composition Result at Timestamp {timestamp}: "
            #     f"RGBA({result_color.red()}, {result_color.green()}, {result_color.blue()}, {result_color.alpha()})")
                    
    # To toggle the visibility of the knobs
    def toggle_clipping_knobs_visibility(self, is_clipping):
        self.is_clipping = is_clipping
        self.update()
    
    # To show knob position as QToolTip object
    def show_knob_position(self, x):
        if self.video_duration is not None:
            position_seconds = x / self.width() * self.video_duration
            hours = int(position_seconds / 3600)
            minutes = int((position_seconds % 3600) / 60)
            seconds = int(position_seconds % 60)
            time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            global_pos = self.mapToGlobal(QtCore.QPoint(int(x), 0))
            QtWidgets.QToolTip.showText(global_pos, time_str, self)

    # For mouse clicks - interacting with knobs
    def mousePressEvent(self, event):
        if event.buttons() & QtCore.Qt.MouseButton.LeftButton: # If mouse left clicked
            x = event.position().x() # Get the position of the knob
           
            # Check if the mouse click is on a knob
            knob_radius = 5
            start_knob_x = self.trim_start_knob_pos_percent * self.width() # Relative position of the start knob
            end_knob_x = self.trim_end_knob_pos_percent * self.width() # Relative position of the end knob

            if abs(x - start_knob_x) <= knob_radius: # If start knob is clicked
                self.dragging_knob = 'trim_start' # Make the knob being dragged or moved as the start knob
            elif abs(x - end_knob_x) <= knob_radius: # If end knob is clicked
                self.dragging_knob = 'trim_end' # Make the knob being dragged or moved as the end knob
            else: # Else
                super().mousePressEvent(event) # self.dragging_knob is non-existent and instead, the mousePressEvent() method from the base or parent class is executed (i.e., the blue rectangular knob)
    
    # For dragging knobs with mouse
    def mouseMoveEvent(self, event):
        if hasattr(self, 'dragging_knob') and self.dragging_knob: # If self.dragging_knob attribute exist and has a value
            x = event.position().x() # Get the position of th knob
            self.show_knob_position(x) # Show start/end knob position QToolTip when mouse pointer in start and end knobs are moved

            # Calculate the knob positions based on the percentages of the slider width
            start_knob_x = self.trim_start_knob_pos_percent * self.width()
            end_knob_x = self.trim_end_knob_pos_percent * self.width()

            # Ensure the knobs stay within the slider bounds
            if x <= 0: # If the position is less than or equal to 0
                x = 0 # Set the position to 0
            elif x >= self.width(): # If the position is greater than or equal to the width of QSlider (meaning the knob is in the end side)
                x = self.width() # Set the position to maximum possible position - the QSlider width

            # Calculate the minimum allowed distance (1 second of video)
            min_distance_pixels = self.width() * (1 / self.video_duration) # pixels that amount to 1 second base on input video duration
            
            # Ensure that the start knob is always to the left of the end knob
            if self.dragging_knob == 'trim_start' and x >= end_knob_x: # If the relative position of the start knob is greater than or equal the relative position of end knob
                x = end_knob_x - min_distance_pixels  # Move the start knob just to the left of the end knob by subtracting the position of the end knob to the min_distance_pixels

            if self.dragging_knob == 'trim_end' and x <= start_knob_x: # If the relative position of the end knob is less than or equal the relative position of start knob
                x = start_knob_x + min_distance_pixels  # Move the end knob just to the right of the start knob by adding the position of start knob to the min_distance_pixels


            if self.dragging_knob == 'trim_start': # If the knob being dragged is the start knob
                self.trim_start_knob_pos_percent = x / self.width() # Calculate the relative position of the start knob
            elif self.dragging_knob == 'trim_end': # If the knob being dragged is the end knob
                self.trim_end_knob_pos_percent = x / self.width() # Calculate the relative position of the end knob

            self.update() # Update the appearance of QSlider
            
        else: # If there is no self.dragging_knob instance - meaning the knob moved is neither the start nor end knob
            super().mouseMoveEvent(event) # Execute the mouseMoveEvent() of the base of parent class (QSlider)
        
    
    # For mouse click release
    def mouseReleaseEvent(self, event):
        if hasattr(self, 'dragging_knob') and self.dragging_knob: # If self.dragging_knob attribute exist and has a value
            x = event.position().x()
            self.show_knob_position(x) # Show start/end knob position QToolTip when mouse click is released
            self.dragging_knob = None # Release bot start and end knob by setting self.dragging_knob to None
        else:
            super().mouseReleaseEvent(event) # If there is no self.dragging_knob() attribute, execute the mouseReleaseEvent() of the base of parent class (QSlider) - meaning the blue rectangular default knob is the one being released



class Ui_videoplayer(object):
    def setupUi(self, videoplayer):
        videoplayer.setObjectName("videoplayer")
        videoplayer.resize(1280, 771)
        videoplayer.setMinimumSize(QtCore.QSize(1280, 720))
        videoplayer.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(parent=videoplayer)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget.setStyleSheet("#widget {\n"
"background-color: rgb(203, 203, 203);\n"
"}")
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(-1, -1, -1, 7)
        self.verticalLayout.setSpacing(5)
        self.verticalLayout.setObjectName("verticalLayout")
        self.videoscreen = QVideoWidget(parent=self.widget)
        self.videoscreen.setStyleSheet("#widget_2 {\n"
"border-radius: 4px;\n"
"border: 1px solid gray;\n"
"background-color: white;\n"
"}")
        self.videoscreen.setObjectName("videoscreen")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.videoscreen)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 5)
        self.verticalLayout_2.setSpacing(6)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout.addWidget(self.videoscreen)
        self.videotimer = QtWidgets.QWidget(parent=self.widget)
        self.videotimer.setMaximumSize(QtCore.QSize(16777215, 40))
        self.videotimer.setStyleSheet("#videotimer {\n"
"border-radius: 4px;\n"
"border: 1px solid gray;\n"
"background-color: white;\n"
"}")
        self.videotimer.setObjectName("videotimer")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.videotimer)
        self.horizontalLayout.setContentsMargins(-1, -1, -1, 6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.videotime = QtWidgets.QLabel(parent=self.videotimer)
        self.videotime.setStyleSheet("font: 12pt \"Segoe UI\";")
        self.videotime.setObjectName("videotime")
        self.horizontalLayout.addWidget(self.videotime, 0, QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignVCenter)
        # Usage of CustomSlider na trial
        self.videotimebar = CustomSlider(parent=self.videotimer)
        self.videotimebar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.videotimebar.setObjectName("videotimebar")
        self.horizontalLayout.addWidget(self.videotimebar)
        self.videotimeleft = QtWidgets.QLabel(parent=self.videotimer)
        self.videotimeleft.setStyleSheet("font: 12pt \"Segoe UI\";")
        self.videotimeleft.setObjectName("videotimeleft")
        self.horizontalLayout.addWidget(self.videotimeleft, 0, QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.verticalLayout.addWidget(self.videotimer)
        self.widget_3 = QtWidgets.QWidget(parent=self.widget)
        self.widget_3.setMaximumSize(QtCore.QSize(16777215, 90))
        self.widget_3.setStyleSheet("#widget_3{\n"
"background-color: rgb(255, 255, 255);\n"
"border-radius: 4px;\n"
"border: 1px solid gray;\n"
"background-color: white;\n"
"}")
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_2.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.playbutton = QtWidgets.QPushButton(parent=self.widget_3)
        self.playbutton.setMinimumSize(QtCore.QSize(100, 55))
        self.playbutton.setStyleSheet("#playbutton{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 4px;\n"
"border: 1px solid black;\n"
"background-color: white;\n"
"}\n"
"\n"
"#playbutton:hover{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 4px;\n"
"border: 1px solid black;\n"
"background-color: rgb(197, 197, 197);\n"
"}\n"
"\n"
"#playbutton:pressed{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 2px;\n"
"border: 1px solid black;\n"
"background-color: gray;\n"
"}")
        self.playbutton.setObjectName("playbutton")
        self.horizontalLayout_2.addWidget(self.playbutton)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.Legend = QtWidgets.QWidget(parent=self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Legend.sizePolicy().hasHeightForWidth())
        self.Legend.setSizePolicy(sizePolicy)
        self.Legend.setMinimumSize(QtCore.QSize(200, 90))
        self.Legend.setMaximumSize(QtCore.QSize(16777215, 100))
        self.Legend.setStyleSheet(".colored-circle {\n"
"      width: 100px;\n"
"      height: 100px;\n"
"      background-color: #3498db; /* Replace with your desired color */\n"
"      border-radius: 50%;\n"
"      display: flex;\n"
"      justify-content: center;\n"
"      align-items: center;\n"
"    }")
        self.Legend.setObjectName("Legend")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.Legend)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label = QtWidgets.QLabel(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(0, 17))
        self.label.setMaximumSize(QtCore.QSize(16777215, 17))
        self.label.setStyleSheet("font: 700 9pt \"Segoe UI\";")
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 2)
        self.weapon_legend_3 = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.weapon_legend_3.sizePolicy().hasHeightForWidth())
        self.weapon_legend_3.setSizePolicy(sizePolicy)
        self.weapon_legend_3.setMinimumSize(QtCore.QSize(120, 17))
        self.weapon_legend_3.setMaximumSize(QtCore.QSize(16777215, 17))
        self.weapon_legend_3.setObjectName("weapon_legend_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.weapon_legend_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.weapon_color_5 = QtWidgets.QLabel(parent=self.weapon_legend_3)
        self.weapon_color_5.setMinimumSize(QtCore.QSize(30, 10))
        self.weapon_color_5.setMaximumSize(QtCore.QSize(30, 10))
        self.weapon_color_5.setStyleSheet("background-color: rgba(50, 180, 75, 180);")
        self.weapon_color_5.setText("")
        self.weapon_color_5.setObjectName("weapon_color_5")
        self.horizontalLayout_3.addWidget(self.weapon_color_5)
        self.text_9 = QtWidgets.QLabel(parent=self.weapon_legend_3)
        self.text_9.setMinimumSize(QtCore.QSize(0, 16))
        self.text_9.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_9.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_9.setObjectName("text_9")
        self.horizontalLayout_3.addWidget(self.text_9)
        self.gridLayout_2.addWidget(self.weapon_legend_3, 1, 0, 1, 1)
        self.weapon_legend_2 = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.weapon_legend_2.sizePolicy().hasHeightForWidth())
        self.weapon_legend_2.setSizePolicy(sizePolicy)
        self.weapon_legend_2.setMinimumSize(QtCore.QSize(0, 17))
        self.weapon_legend_2.setMaximumSize(QtCore.QSize(16777215, 17))
        self.weapon_legend_2.setObjectName("weapon_legend_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.weapon_legend_2)
        self.horizontalLayout_6.setContentsMargins(5, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.weapon_color_4 = QtWidgets.QLabel(parent=self.weapon_legend_2)
        self.weapon_color_4.setMinimumSize(QtCore.QSize(30, 10))
        self.weapon_color_4.setMaximumSize(QtCore.QSize(30, 10))
        self.weapon_color_4.setStyleSheet("background-color: rgba(125, 140, 47, 165);")
        self.weapon_color_4.setText("")
        self.weapon_color_4.setObjectName("weapon_color_4")
        self.horizontalLayout_6.addWidget(self.weapon_color_4)
        self.text_6 = QtWidgets.QLabel(parent=self.weapon_legend_2)
        self.text_6.setMinimumSize(QtCore.QSize(0, 16))
        self.text_6.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_6.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_6.setObjectName("text_6")
        self.horizontalLayout_6.addWidget(self.text_6)
        self.gridLayout_2.addWidget(self.weapon_legend_2, 1, 1, 1, 1)
        self.up_legend = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.up_legend.sizePolicy().hasHeightForWidth())
        self.up_legend.setSizePolicy(sizePolicy)
        self.up_legend.setMinimumSize(QtCore.QSize(0, 17))
        self.up_legend.setMaximumSize(QtCore.QSize(16777215, 17))
        self.up_legend.setObjectName("up_legend")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.up_legend)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.up_color = QtWidgets.QLabel(parent=self.up_legend)
        self.up_color.setMinimumSize(QtCore.QSize(30, 10))
        self.up_color.setMaximumSize(QtCore.QSize(30, 10))
        self.up_color.setStyleSheet("background-color: rgba(200, 100, 20, 150);")
        self.up_color.setText("")
        self.up_color.setObjectName("up_color")
        self.horizontalLayout_4.addWidget(self.up_color)
        self.text_4 = QtWidgets.QLabel(parent=self.up_legend)
        self.text_4.setMinimumSize(QtCore.QSize(0, 16))
        self.text_4.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_4.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_4.setObjectName("text_4")
        self.horizontalLayout_4.addWidget(self.text_4)
        self.gridLayout_2.addWidget(self.up_legend, 2, 0, 1, 1)
        self.up_legend_2 = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.up_legend_2.sizePolicy().hasHeightForWidth())
        self.up_legend_2.setSizePolicy(sizePolicy)
        self.up_legend_2.setMinimumSize(QtCore.QSize(120, 17))
        self.up_legend_2.setMaximumSize(QtCore.QSize(16777215, 17))
        self.up_legend_2.setObjectName("up_legend_2")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.up_legend_2)
        self.horizontalLayout_7.setContentsMargins(5, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.up_color_2 = QtWidgets.QLabel(parent=self.up_legend_2)
        self.up_color_2.setMinimumSize(QtCore.QSize(30, 10))
        self.up_color_2.setMaximumSize(QtCore.QSize(30, 10))
        self.up_color_2.setStyleSheet("background-color: rgba(105, 120, 137, 175);")
        self.up_color_2.setText("")
        self.up_color_2.setObjectName("up_color_2")
        self.horizontalLayout_7.addWidget(self.up_color_2)
        self.text_7 = QtWidgets.QLabel(parent=self.up_legend_2)
        self.text_7.setMinimumSize(QtCore.QSize(0, 16))
        self.text_7.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_7.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_7.setObjectName("text_7")
        self.horizontalLayout_7.addWidget(self.text_7)
        self.gridLayout_2.addWidget(self.up_legend_2, 2, 1, 1, 1)
        self.lower_legend = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lower_legend.sizePolicy().hasHeightForWidth())
        self.lower_legend.setSizePolicy(sizePolicy)
        self.lower_legend.setMinimumSize(QtCore.QSize(120, 17))
        self.lower_legend.setMaximumSize(QtCore.QSize(16777215, 17))
        self.lower_legend.setObjectName("lower_legend")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.lower_legend)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.lower_color = QtWidgets.QLabel(parent=self.lower_legend)
        self.lower_color.setMinimumSize(QtCore.QSize(30, 10))
        self.lower_color.setMaximumSize(QtCore.QSize(30, 10))
        self.lower_color.setStyleSheet("background-color: rgba(160, 60, 200, 170);")
        self.lower_color.setText("")
        self.lower_color.setObjectName("lower_color")
        self.horizontalLayout_5.addWidget(self.lower_color)
        self.text_5 = QtWidgets.QLabel(parent=self.lower_legend)
        self.text_5.setMinimumSize(QtCore.QSize(0, 16))
        self.text_5.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_5.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_5.setObjectName("text_5")
        self.horizontalLayout_5.addWidget(self.text_5)
        self.gridLayout_2.addWidget(self.lower_legend, 3, 0, 1, 1)
        self.up_legend_3 = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.up_legend_3.sizePolicy().hasHeightForWidth())
        self.up_legend_3.setSizePolicy(sizePolicy)
        self.up_legend_3.setMinimumSize(QtCore.QSize(0, 17))
        self.up_legend_3.setMaximumSize(QtCore.QSize(16777215, 17))
        self.up_legend_3.setObjectName("up_legend_3")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.up_legend_3)
        self.horizontalLayout_8.setContentsMargins(5, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.up_color_3 = QtWidgets.QLabel(parent=self.up_legend_3)
        self.up_color_3.setMinimumSize(QtCore.QSize(30, 10))
        self.up_color_3.setMaximumSize(QtCore.QSize(30, 10))
        self.up_color_3.setStyleSheet("background-color: rgba(180, 80, 110, 160);")
        self.up_color_3.setText("")
        self.up_color_3.setObjectName("up_color_3")
        self.horizontalLayout_8.addWidget(self.up_color_3)
        self.text_8 = QtWidgets.QLabel(parent=self.up_legend_3)
        self.text_8.setMinimumSize(QtCore.QSize(0, 16))
        self.text_8.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_8.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_8.setObjectName("text_8")
        self.horizontalLayout_8.addWidget(self.text_8)
        self.gridLayout_2.addWidget(self.up_legend_3, 3, 1, 1, 1)
        self.weapon_legend_4 = QtWidgets.QWidget(parent=self.Legend)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.weapon_legend_4.sizePolicy().hasHeightForWidth())
        self.weapon_legend_4.setSizePolicy(sizePolicy)
        self.weapon_legend_4.setMinimumSize(QtCore.QSize(0, 17))
        self.weapon_legend_4.setMaximumSize(QtCore.QSize(16777215, 17))
        self.weapon_legend_4.setObjectName("weapon_legend_4")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.weapon_legend_4)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.weapon_color_6 = QtWidgets.QLabel(parent=self.weapon_legend_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.weapon_color_6.sizePolicy().hasHeightForWidth())
        self.weapon_color_6.setSizePolicy(sizePolicy)
        self.weapon_color_6.setMinimumSize(QtCore.QSize(30, 10))
        self.weapon_color_6.setMaximumSize(QtCore.QSize(30, 10))
        self.weapon_color_6.setStyleSheet("background-color: rgba(142, 100, 123, 167);")
        self.weapon_color_6.setText("")
        self.weapon_color_6.setObjectName("weapon_color_6")
        self.horizontalLayout_9.addWidget(self.weapon_color_6)
        self.text_10 = QtWidgets.QLabel(parent=self.weapon_legend_4)
        self.text_10.setMinimumSize(QtCore.QSize(0, 16))
        self.text_10.setMaximumSize(QtCore.QSize(16777215, 16))
        self.text_10.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.text_10.setObjectName("text_10")
        self.horizontalLayout_9.addWidget(self.text_10)
        self.gridLayout_2.addWidget(self.weapon_legend_4, 4, 0, 1, 1)
        self.horizontalLayout_2.addWidget(self.Legend)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.clipbutton = QtWidgets.QPushButton(parent=self.widget_3)
        self.clipbutton.setMinimumSize(QtCore.QSize(135, 55))
        self.clipbutton.setStyleSheet("#clipbutton{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 4px;\n"
"border: 1px solid black;\n"
"background-color: white;\n"
"}\n"
"\n"
"#clipbutton:hover{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 4px;\n"
"border: 1px solid black;\n"
"background-color: rgb(197, 197, 197);\n"
"}\n"
"\n"
"#clipbutton:pressed{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 2px;\n"
"border: 1px solid black;\n"
"background-color: gray;\n"
"}")
        self.clipbutton.setObjectName("clipbutton")
        self.horizontalLayout_2.addWidget(self.clipbutton)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem5)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem6)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.savebutton = QtWidgets.QPushButton(parent=self.widget_3)
        self.savebutton.setMinimumSize(QtCore.QSize(100, 55))
        self.savebutton.setStyleSheet("#savebutton{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 4px;\n"
"border: 1px solid black;\n"
"background-color: white;\n"
"}\n"
"\n"
"#savebutton:hover{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 4px;\n"
"border: 1px solid black;\n"
"background-color: rgb(197, 197, 197);\n"
"}\n"
"\n"
"#savebutton:pressed{\n"
"font: 700 10pt \"Segoe UI\";\n"
"border-radius: 2px;\n"
"border: 1px solid black;\n"
"background-color: gray;\n"
"}")
        self.savebutton.setObjectName("savebutton")
        self.horizontalLayout_2.addWidget(self.savebutton)
        self.verticalLayout.addWidget(self.widget_3)
        self.gridLayout.addWidget(self.widget, 0, 0, 1, 1)
        videoplayer.setCentralWidget(self.centralwidget)

        self.retranslateUi(videoplayer)
        QtCore.QMetaObject.connectSlotsByName(videoplayer)

    def retranslateUi(self, videoplayer):
        _translate = QtCore.QCoreApplication.translate
        videoplayer.setWindowTitle(_translate("videoplayer", "Video Player"))
        self.videotime.setText(_translate("videoplayer", "00:00"))
        self.videotimeleft.setText(_translate("videoplayer", "00:00"))
        self.playbutton.setText(_translate("videoplayer", "PLAY"))
        self.label.setText(_translate("videoplayer", "Line Color Legend for Detected Timestamps:"))
        self.text_9.setText(_translate("videoplayer", " - Weapon"))
        self.text_6.setText(_translate("videoplayer", " - Weapon and Upper Clothing"))
        self.text_4.setText(_translate("videoplayer", " - Upper Clothing"))
        self.text_7.setText(_translate("videoplayer", " - Weapon and Lower Clothing"))
        self.text_5.setText(_translate("videoplayer", " - Lower Clothing"))
        self.text_8.setText(_translate("videoplayer", " - Upper and Lower Clothing"))
        self.text_10.setText(_translate("videoplayer", " - All"))
        self.clipbutton.setText(_translate("videoplayer", "START CLIPPING"))
        self.savebutton.setText(_translate("videoplayer", "SAVE"))